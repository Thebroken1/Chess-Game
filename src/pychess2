import pygame
import chess
import chess.engine  # Import the chess engine module

# Initialize Pygame
pygame.init()

# Set up the game window
WIDTH, HEIGHT = 800, 800
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption('Chess')

# Set up colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
LIGHT_SQUARE = (240, 217, 181)
DARK_SQUARE = (181, 136, 99)
HIGHLIGHT_COLOR = (255, 255, 0, 153)  # Yellow with 60% transparency
CHECK_COLOR = (255, 0, 0, 153)  # Red with 60% transparency
CHECKMATE_COLOR = (255, 0, 0)  # Red for checkmate text

# Load the images for the pieces (ensure your images are named accordingly)
pieces = {}
piece_images = ['wp', 'wn', 'wb', 'wr', 'wq', 'wk', 'bp', 'bn', 'bb', 'br', 'bq', 'bk']
for piece in piece_images:
    pieces[piece] = pygame.image.load(f"images/{piece}.png")

# Create the board
def draw_board(board, selected_square=None, check_squares=None):
    for row in range(8):
        for col in range(8):
            color = LIGHT_SQUARE if (row + col) % 2 == 0 else DARK_SQUARE
            pygame.draw.rect(screen, color, pygame.Rect(col * 100, row * 100, 100, 100))
            
            # Highlight valid moves if a piece is selected
            if selected_square is not None:
                piece = board.piece_at(selected_square)
                if piece and piece.color == board.turn:
                    valid_moves = [move.to_square for move in board.legal_moves if move.from_square == selected_square]
                    if chess.square(col, row) in valid_moves:
                        pygame.draw.rect(screen, HIGHLIGHT_COLOR, pygame.Rect(col * 100, row * 100, 100, 100))

            # Highlight squares if the king is in check
            if check_squares and chess.square(col, row) in check_squares:
                pygame.draw.rect(screen, CHECK_COLOR, pygame.Rect(col * 100, row * 100, 100, 100))

            # Draw the pieces
            piece = board.piece_at(chess.square(col, row))
            if piece:
                piece_code = piece.piece_type - 1 + (0 if piece.color == chess.WHITE else 6)
                screen.blit(pieces[piece_images[piece_code]], (col * 100 + 10, row * 100 + 10))

def draw_checkmate_message():
    font = pygame.font.Font(None, 74)
    text = font.render("Checkmate!", True, CHECKMATE_COLOR)
    text_rect = text.get_rect(center=(WIDTH // 2, HEIGHT // 2))
    screen.blit(text, text_rect)

# Handle mouse events for piece movement
def get_square_under_mouse():
    pos = pygame.mouse.get_pos()
    return pos[1] // 100, pos[0] // 100

def main():
    board = chess.Board()
    selected_square = None
    check_squares = []
    game_over = False

    # Initialize Stockfish
    stockfish_path = "C:/Users/RVAISH/Desktop/New folder/New folder/stockfish-windows-x86-64-avx2.exe"  # Update this path
    engine = chess.engine.SimpleEngine.popen_uci(stockfish_path)

    running = True
    while running:
        screen.fill(WHITE)

        # Draw the chessboard and pieces
        draw_board(board , selected_square, check_squares)

        # Check for check
        if board.is_check():
            # Blink effect for the check indicator
            if pygame.time.get_ticks() // 500 % 2 == 0:  # Blink every 500 ms
                king_square = board.king(board.turn)
                check_squares = [king_square]  # Highlight the king's square
            else:
                check_squares = []  # Clear the highlight

        # Check for checkmate
        if board.is_checkmate():
            game_over = True

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.MOUSEBUTTONDOWN and not game_over:
                row, col = get_square_under_mouse()
                square = chess.square(col, row)
                piece = board.piece_at(square)

                if piece and piece.color == board.turn:
                    selected_square = square
                elif selected_square is not None:
                    move = chess.Move(from_square=selected_square, to_square=square)
                    if move in board.legal_moves:
                        board.push(move)  # Push the move to the board
                        selected_square = None  # Deselect the piece

                        # AI makes a move
                        if not board.is_game_over():
                            result = engine.play(board, chess.engine.Limit(time=2.0))  # AI thinks for 2 seconds
                            board.push(result.move)  # Push the AI's move

                    else:
                        selected_square = None  # Invalid move, deselect

        if game_over:
            draw_checkmate_message()

        pygame.display.flip()

    engine.quit()  # Close the engine when done
    pygame.quit()

if __name__ == "__main__":
    main()
